using System;
using System.Collections.Generic;
using UnityEngine;

namespace CruiseLineInc.Ship.Data
{
    public enum ZoneFunctionType
    {
        Unknown = 0,
        Corridor,
        Stateroom,
        Dining,
        Leisure,
        Service,
        Engine,
        Storage,
        Medical,
        Utility,
        Crew,
        Bridge,
        Elevator,
        Exit
    }

    public enum ConnectorType
    {
        None = 0,
        Corridor,
        Stair,
        Elevator,
        Gangway
    }

    [Serializable]
    public class ZoneData
    {
        public ZoneId Id { get; set; }
        public ZoneFunctionType FunctionType { get; set; } = ZoneFunctionType.Unknown;
        public int Deck { get; set; }
        public ConnectorType? Connector { get; set; }
        public bool IsOperational { get; set; } = true;
        public string ZoneBlueprintId { get; set; }
        public HashSet<TileCoord> Tiles { get; } = new HashSet<TileCoord>();
        public List<PortalId> Portals { get; } = new List<PortalId>();
        public HashSet<ZoneId> AdjacentZones { get; } = new HashSet<ZoneId>();
        public List<RoomId> Rooms { get; } = new List<RoomId>();
        public Dictionary<string, float> Metrics { get; } = new Dictionary<string, float>();
        public List<DeckLink> DeckLinks { get; } = new List<DeckLink>();
        public bool IsDefaultPlacement { get; set; } = false;
        public bool IsDeletable { get; set; } = true;
        public Vector2Int Size { get; set; } = Vector2Int.one;
        public Vector3Int Origin { get; set; } = Vector3Int.zero;

        public override string ToString() => $"{Id} Deck:{Deck} Function:{FunctionType} Tiles:{Tiles.Count}";
    }

    [Serializable]
    public class DeckLink
    {
        public int TargetDeck;
        public PortalId Portal;
        public float TraversalCost = 1f;
        public int Capacity = 1;
    }

    [Serializable]
    public class RoomData
    {
        public RoomId Id { get; set; }
        public ZoneId ZoneId { get; set; }
        public RoomArchetypeId Archetype { get; set; } = RoomArchetypeId.Invalid;
        public BoundsInt Footprint { get; set; }
        public HashSet<TileCoord> Tiles { get; } = new HashSet<TileCoord>();
        public List<RoomDoor> Doors { get; } = new List<RoomDoor>();
        public Dictionary<PortalId, float> CachedPortalCosts { get; } = new Dictionary<PortalId, float>();
        public List<FurnitureNodeId> FurnitureNodes { get; } = new List<FurnitureNodeId>();
        public Dictionary<string, float> CapacityStats { get; } = new Dictionary<string, float>();
        public bool IsOperational { get; set; } = true;
        public bool IsAutoGenerated { get; set; }
        public bool IsDeletable { get; set; } = true;

        public override string ToString() => $"{Id} Zone:{ZoneId} Tiles:{Tiles.Count}";
    }

    [Serializable]
    public struct RoomDoor
    {
        public TileCoord Tile;
        public Vector3 Facing;
        public PortalId LinkedPortal;

        public RoomDoor(TileCoord tile, Vector3 facing, PortalId linkedPortal)
        {
            Tile = tile;
            Facing = facing;
            LinkedPortal = linkedPortal;
        }
    }

    [Serializable]
    public class FurnitureNode
    {
        public FurnitureNodeId Id { get; set; }
        public RoomId RoomId { get; set; }
        public ZoneId ZoneId { get; set; }
        public string PrefabId { get; set; }
        public Vector3 LocalPosition { get; set; }
        public List<Vector3> ApproachOffsets { get; } = new List<Vector3>();
        public List<string> InteractionTags { get; } = new List<string>();
        public int OccupancySlots { get; set; } = 1;
        public bool IsEnabled { get; set; } = true;
    }

    [Serializable]
    public class ZonePortal
    {
        public PortalId Id { get; set; }
        public ZoneId OwnerZone { get; set; }
        public ZoneId LinkedCorridor { get; set; }
        public TileCoord Entry { get; set; }
        public TileCoord? Exit { get; set; }
        public PortalId CrossDeckLink { get; set; } = PortalId.Invalid;
        public float TraversalCost { get; set; } = 1f;
    }

    [Serializable]
    public class PortalDistanceCache
    {
        private readonly Dictionary<PortalId, Dictionary<RoomId, float>> _distances = new();
        public long Version { get; private set; }

        public IReadOnlyDictionary<PortalId, Dictionary<RoomId, float>> Distances => _distances;

        public void Clear()
        {
            _distances.Clear();
            Version++;
        }

        public void SetDistance(PortalId portal, RoomId room, float cost)
        {
            if (!_distances.TryGetValue(portal, out var roomCosts))
            {
                roomCosts = new Dictionary<RoomId, float>();
                _distances[portal] = roomCosts;
            }

            roomCosts[room] = cost;
        }

        public bool TryGetDistance(PortalId portal, RoomId room, out float cost)
        {
            cost = 0f;

            if (_distances.TryGetValue(portal, out var roomCosts))
            {
                return roomCosts.TryGetValue(room, out cost);
            }

            return false;
        }
    }

    [Serializable]
    public class ZoneGraphData
    {
        public Dictionary<ZoneId, HashSet<ZoneId>> Adjacency { get; } = new Dictionary<ZoneId, HashSet<ZoneId>>();
        public long Version { get; private set; }

        public void Clear()
        {
            Adjacency.Clear();
            Version++;
        }

        public void AddEdge(ZoneId a, ZoneId b)
        {
            if (!a.IsValid || !b.IsValid || a == b)
                return;

            if (!Adjacency.TryGetValue(a, out var setA))
            {
                setA = new HashSet<ZoneId>();
                Adjacency[a] = setA;
            }

            if (!Adjacency.TryGetValue(b, out var setB))
            {
                setB = new HashSet<ZoneId>();
                Adjacency[b] = setB;
            }

            if (setA.Add(b) | setB.Add(a))
            {
                Version++;
            }
        }

        public void RemoveZone(ZoneId id)
        {
            if (!Adjacency.TryGetValue(id, out var set))
                return;

            foreach (ZoneId neighbour in set)
            {
                if (Adjacency.TryGetValue(neighbour, out var neighbourSet))
                {
                    neighbourSet.Remove(id);
                }
            }

            Adjacency.Remove(id);
            Version++;
        }
    }

    [Serializable]
    public class DeckZoneIndex
    {
        private readonly Dictionary<TileCoord, ZoneId> _zoneByTile = new();
        private readonly Dictionary<TileCoord, RoomId> _roomByTile = new();

        public int DeckLevel { get; }

        public DeckZoneIndex(int deckLevel)
        {
            DeckLevel = deckLevel;
        }

        public void SetZone(TileCoord coord, ZoneId zoneId) => _zoneByTile[coord] = zoneId;
        public bool TryGetZone(TileCoord coord, out ZoneId zoneId) => _zoneByTile.TryGetValue(coord, out zoneId);

        public void SetRoom(TileCoord coord, RoomId roomId) => _roomByTile[coord] = roomId;
        public bool TryGetRoom(TileCoord coord, out RoomId roomId) => _roomByTile.TryGetValue(coord, out roomId);

        public void RemoveZone(TileCoord coord) => _zoneByTile.Remove(coord);
        public void RemoveRoom(TileCoord coord) => _roomByTile.Remove(coord);

        public void Clear()
        {
            _zoneByTile.Clear();
            _roomByTile.Clear();
        }
    }

    [Serializable]
    public class AgentRuntimeState
    {
        public AgentId Id { get; set; }
        public RoomId HomeRoom { get; set; } = RoomId.Invalid;
        public ZoneId HomeZone { get; set; } = ZoneId.Invalid;
        public List<PortalId> PreferredPortalChain { get; } = new List<PortalId>();
        public PortalId LastValidatedPortal { get; set; } = PortalId.Invalid;
        public string CurrentTaskId { get; set; }
        public bool NeedsRepath { get; set; }
    }
}
